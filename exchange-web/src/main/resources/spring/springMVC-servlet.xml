<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 启用spring mvc 注解  -->
    <context:annotation-config />

    <!-- 自动扫描指定目录，将控制器加载到bean -->
    <!-- exclude-filter进行黑名单过滤 -->
    <context:component-scan base-package="com.cc.controller, com.cc.websocket"/>

    <!-- 开启面向切面代理（自定义切面），方法日志写入 -->
    <aop:aspectj-autoproxy/>

    <!-- 自动注册 DefaultAnnotationHandlerMapping 与 AnnotationMethodHandlerAdapter 两个 bean, 解决了 @Controller 注解的使用前提配置 -->
    <mvc:annotation-driven/>

    <!-- 根目录'/'对应页面 index.jsp 后缀名 .jsp 由视图解析器添加 -->
    <mvc:view-controller path="/" view-name="/index"/>

    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <!-- 可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理ajax返回值时候乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/x-www-form-urlencoded;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- 配置 json 转换器 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/x-www-form-urlencoded;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 配置文件上传 resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 20*1024*1024即10M -->
        <property name="maxUploadSize" value="20971520"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <!-- 配置 Login 登录拦截器（改为 shrio 安全认证模式） -->
    <!--
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/resources/**" />
            <bean class="com.yan.core.interceptor.LoginInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>
     -->

    <!-- 配置spring处理静态资源文件 两种方案 -->
    <!--方案一: 将静态资源的处理经由Spring MVC框架交回Web应用服务器服务器默认的defaultServlet处理 -->
    <!-- 
	<mvc:default-servlet-handler />
	 -->
    <!--(推荐方案)方案二: 把images/**映射到ResourceHttpRequestHandler进行处理 -->
    <mvc:resources location="/resources/" mapping="/resources/**"/>

    <!-- springMVC 异常处理（由于无法处理404异常，404由web.xml处理） -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">redirect:/views/error.jsp</prop>
            </props>
        </property>
        <property name="defaultErrorView" value="redirect:/views/error.jsp"/>
        <property name="defaultStatusCode" value="500"/>
    </bean>

</beans>
